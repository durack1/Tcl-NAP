# Generated automatically from Makefile.in by configure.
# Makefile.in --
#
#       If this file has the name "Makefile.in" then it is a template for a
#       Makefile;  to generate the actual Makefile, run "./configure", which
#       is a configuration script generated by the "autoconf" program.
#       Constructs like "@foo@" will get replaced in the actual Makefile.
#
# Copyright (c) 1999, CSIRO Australia
#
# Author: Harvey Davies, CSIRO Atmospheric Research
#
# RCS: @(#) $Id: Makefile.in,v 1.123 2002/10/10 05:11:29 dav480 Exp $

#------------------------------------------------------------------------------
# Header (#include) files i.e. *.h files
#------------------------------------------------------------------------------

GENERIC_PERM_HDRS = \
	$(GENERIC_DIR)/napPolygon.h \
	$(GENERIC_DIR)/nap_hdf.h \
	$(GENERIC_DIR)/nap_netcdf.h \
	$(GENERIC_DIR)/nap_check.h

GENERIC_TMP_HDRS = \
	$(GENERIC_DIR)/linsys.h \
	$(GENERIC_DIR)/nap.h \
	$(GENERIC_DIR)/napParse.tab.h

GENERIC_HDRS = \
	$(GENERIC_PERM_HDRS) \
	$(GENERIC_TMP_HDRS)

UNIX_HDRS =

HDRS = $(GENERIC_HDRS) $(UNIX_HDRS)

#------------------------------------------------------------------------------
# C source files i.e. *.c files
#------------------------------------------------------------------------------

GENERIC_M4_C_TARGETS = \
	$(GENERIC_DIR)/linsys.c \
	$(GENERIC_DIR)/nap.c \
	$(GENERIC_DIR)/napChoice.c \
	$(GENERIC_DIR)/napDyad.c \
	$(GENERIC_DIR)/napDyadLib.c \
	$(GENERIC_DIR)/napLib.c \
	$(GENERIC_DIR)/napMonad.c \
	$(GENERIC_DIR)/napParseLib.c \
	$(GENERIC_DIR)/napSpatial.c \
	$(GENERIC_DIR)/nap_netcdf.c \
	$(GENERIC_DIR)/nap_ooc.c \
	$(GENERIC_DIR)/nap_hdf.c

GENERIC_PERM_C = \
	$(GENERIC_DIR)/napImgNAO.c \
	$(GENERIC_DIR)/napInit.c \
	$(GENERIC_DIR)/napPolygon.c \
	$(GENERIC_DIR)/nap_get.c

GENERIC_TMP_C = \
	$(GENERIC_M4_C_TARGETS) \
	$(GENERIC_DIR)/napParse.tab.c

GENERIC_SRCS = \
	$(GENERIC_DIR)/$(PACKAGE)sh.c \
	$(GENERIC_PERM_C) \
	$(GENERIC_TMP_C)

UNIX_SRCS =

SRCS = $(GENERIC_SRCS) $(UNIX_SRCS)

#------------------------------------------------------------------------------
# Object files (e.g. *.o files for unix) common to all binaries
#------------------------------------------------------------------------------

OBJS = \
	linsys$(OBJEXT) \
	nap$(OBJEXT) \
	napChoice$(OBJEXT) \
	napDyad$(OBJEXT) \
	napDyadLib$(OBJEXT) \
	napImgNAO$(OBJEXT) \
	napInit$(OBJEXT) \
	napLib$(OBJEXT) \
	napMonad$(OBJEXT) \
	napParse.tab$(OBJEXT) \
	napParseLib$(OBJEXT) \
	napPolygon$(OBJEXT) \
	napSpatial$(OBJEXT) \
	nap_get$(OBJEXT) \
	nap_hdf$(OBJEXT) \
	nap_netcdf$(OBJEXT) \
	nap_ooc$(OBJEXT)

#------------------------------------------------------------------------------
# Package name and version numbers.
#
# VERSION is MAJOR_VERSION.MINOR_VERSION
#
# NODOT_VERSION is required for constructing the library name on systems
# (e.g. Windows) that don't like dots in library names.
#
# USE_VERSION is either VERSION or NODOT_VERSION depending on platform
#
# PATCHLEVEL is:
#        a1, a2, ... for alpha releases
#        b1, b2, ... for beta releases
#        .0, .1, ... for official releases
#
# NODOT_PATCHLEVEL is PATCHLEVEL without '.' if any. Used to define CVS_TAG.
# USE_PATCHLEVEL is either PATCHLEVEL or NODOT_PATCHLEVEL depending on platform

#------------------------------------------------------------------------------

PACKAGE = nap
MAJOR_VERSION = 3
MINOR_VERSION = 0
PATCHLEVEL = .5
VERSION = 3.0
NODOT_VERSION = 30
NODOT_PATCHLEVEL = 5
USE_VERSION = 3.0
USE_PATCHLEVEL = .5

#------------------------------------------------------------------------------
# Package directories
#------------------------------------------------------------------------------

PWD = /home/dav480/tcl/tcl-nap/unix
TOP_DIR = ..
ROOT = /home/dav480/tcl
GENERIC_DIR = $(TOP_DIR)/generic
LIBRARY_DIR = $(TOP_DIR)/library
TEST_DIR = $(TOP_DIR)/tests

#------------------------------------------------------------------------------
# Operating system name and version
#------------------------------------------------------------------------------

HOST_OS = Linux
PLATFORM = Linux
system = Linux-2.2.16-22smp

#------------------------------------------------------------------------------
# miscellaneous platform-specific items
#------------------------------------------------------------------------------

CP = cp -f
ECHO = printf '%s\n'
M4 = /usr/bin/m4 -s -B999000
NATIVE_PATH = echo
RANLIB = ranlib
RM = rm -f
TOUCH = touch

#------------------------------------------------------------------------------
# Binary file prefixes & extensions
#   LIB_PREFIX: Prefix for library (e.g. 'lib' for unix, '' for windows)
#   EXEEXT: Suffix for executable (e.g. '' for unix, '.exe' for windows)
#   OBJEXT: Suffix for object file (e.g. '.o' for unix, '.obj' for windows)
#   SHLIB_SUFFIX: Suffix for shared library (e.g. '.so', '.dll')
#------------------------------------------------------------------------------

EXEEXT = 
LIB_PREFIX = lib
OBJEXT = .o
SHLIB_SUFFIX = .so

#------------------------------------------------------------------------------
# DBGX: Used in filenames to indicate whether for debugging.
# '' for optimization.
# 'd' for debugging under windows.
# 'g' for debugging under unix.
#------------------------------------------------------------------------------

DBGX = 

#------------------------------------------------------------------------------
# Pre-processing and 'make depend'
#   CC_MAKEDEPEND: command used to make file depend.mk
#   CPPFLAGS: C pre-processor flags
#------------------------------------------------------------------------------

CC_MAKEDEPEND = gcc -MM -DMAKE_DEPEND $(CPPFLAGS)
CPPFLAGS =   -DUSE_TCL_STUBS=1 -DHAVE_UNISTD_H=1 -DISNAN64=isnan -DVERSION=\"3.0\" -DPATCHLEVEL=\".5\"  $(INCLUDES)
HDF_HEADER_DIR = /home/dav480/hdf/use/include
NC_HEADER_DIR = /home/dav480/nc/use/include
TCL_HEADER_DIR = /home/dav480/tcl/include
INCLUDES = \
	-I`$(NATIVE_PATH) $(GENERIC_DIR)` \
	-I`$(NATIVE_PATH) $(NC_HEADER_DIR)` \
	-I`$(NATIVE_PATH) $(HDF_HEADER_DIR)` \
	-I`$(NATIVE_PATH) $(TCL_HEADER_DIR)`

#------------------------------------------------------------------------------
# Compiling
#------------------------------------------------------------------------------

CC = cc
CFLAGS = ${CFLAGS_OPTIMIZE} -Wimplicit-function-declaration -fPIC 
CFLAGS_OPTIMIZE = -O -D__NO_STRING_INLINES -D__NO_MATH_INLINES
CFLAGS_DEBUG = -g
COMPILE = $(CC) -c $(CPPFLAGS) $(CFLAGS)

#------------------------------------------------------------------------------
# Linking
#   LINK: Base command to use to link object files into executable shell.
#   SHLIB_LD: Base command to use to link object files into shared library.
#   LDFLAGS_OUT: "-o " for unix, "-out:" for windows
#------------------------------------------------------------------------------

LDFLAGS_DEBUG = 
LDFLAGS_OPTIMIZE = 
LDFLAGS_VAR = ${LDFLAGS_OPTIMIZE}
LDFLAGS_OUT = -o 

LINK = $(CC) $(LDFLAGS_VAR) $(LDFLAGS_OUT)$@
SHLIB_LD = cc -shared $(LDFLAGS_VAR) $(LDFLAGS_OUT)$@

TCL_LIB_PATH = /home/dav480/tcl/lib/libtcl8.3$(DBGX).so
TCL_STUB_LIB_PATH = /home/dav480/tcl/lib/libtclstub8.3$(DBGX).a
TK_LIB_PATH = /home/dav480/tcl/lib/libtk8.3$(DBGX).so
TK_STUB_LIB_PATH = /home/dav480/tcl/lib/libtkstub8.3$(DBGX).a
BLT_LIB_PATH = /home/dav480/tcl/lib/libBLT.a
HDF_LIB_PATH = /home/dav480/hdf/use/lib/libdf.a /home/dav480/hdf/use/lib/libjpeg.a /home/dav480/hdf/use/lib/libmfhdf.a /home/dav480/hdf/use/lib/libz.a
NC_LIB_PATH = /home/dav480/nc/use/lib/libnetcdf.a

TK_LIB_SPEC = -L/home/dav480/tcl/lib -ltk8.3$(DBGX)
TCL_LINK_SPEC = -ltcl8.3$(DBGX)
TCL_SHLIB_SPEC = -ltclstub8.3$(DBGX) ${LIBS}

LIBS = 
SYS_LIBS =  -lieee -lm -L/usr/X11R6/lib -lX11
LINK_LIBS = $(EXTRA_LIBS) $(TK_LIB_SPEC) $(TCL_LINK_SPEC) $(LIBS) $(SYS_LIBS)
SHLIB_LD_LIBS = $(EXTRA_LIBS) $(TK_LIB_SPEC) $(TCL_SHLIB_SPEC) $(SYS_LIBS)
EXTRA_LIBS = -L/home/dav480/nc/use/lib -lnetcdf -L/home/dav480/hdf/use/lib -lmfhdf -ldf -ljpeg -lz -L/home/dav480/tcl/lib -lBLT

#------------------------------------------------------------------------------
# Tcl directories and files
#   TCLSH_PROG: Path of shell tclsh
#   TCL_LIBRARY_DIR: Directory containing Tcl library scripts e.g. auto.tcl
#   WISH_PROG: Path of shell wish
#------------------------------------------------------------------------------

TCLSH_PROG = /home/dav480/tcl/bin/tclsh8.3
TCL_LIBRARY_DIR = /home/dav480/tcl/lib/tcl8.3
WISH_PROG = /home/dav480/tcl/bin/wish8.3

#------------------------------------------------------------------------------
# TMP_STDOUT: Name of file to take redirected stdout (work-around windows bug)
#------------------------------------------------------------------------------

TMP_STDOUT = 

#------------------------------------------------------------------------------
# Binaries
#   PACKAGE_SHLIB: Package shared library
#   PACKAGE_SHELL: Package statically-linked tcl-shell (mainly for debugging)
#------------------------------------------------------------------------------

PACKAGE_SHLIB = $(LIB_PREFIX)$(PACKAGE)$(USE_VERSION)$(DBGX)$(SHLIB_SUFFIX)
PACKAGE_IMPORT_LIB = $(PACKAGE)$(USE_VERSION)$(DBGX).lib
PACKAGE_SHELL = $(PACKAGE)sh$(USE_VERSION)$(DBGX)$(EXEEXT)
PACKAGE_SHELL_PROD = $(PACKAGE)sh$(USE_VERSION)$(EXEEXT)
PACKAGE_SHELL_DEBUG = $(PACKAGE)sh$(USE_VERSION)g$(EXEEXT)
BINARIES = $(PACKAGE_SHLIB)

#------------------------------------------------------------------------------
# distribution tar files
#------------------------------------------------------------------------------

COMPRESS = gzip
TAR = tar -cf -
TAR_SUFFIX = .tgz

SRC_TAR = $(PWD)/../$(PACKAGE)$(USE_VERSION)$(USE_PATCHLEVEL)src$(TAR_SUFFIX)
INSTALL_TAR = $(PWD)/../$(PACKAGE)$(USE_VERSION)$(USE_PATCHLEVEL)$(PLATFORM)$(TAR_SUFFIX)

#------------------------------------------------------------------------------
# all (default target)
#------------------------------------------------------------------------------

all: binaries libraries doc

#------------------------------------------------------------------------------
# High-level targets
#------------------------------------------------------------------------------

binaries: $(BINARIES)

libraries:

doc:

install: install-binaries install-headers install-libraries install-doc

src_tar: $(SRC_TAR)

install_tar: $(INSTALL_TAR)

dist: src_tar install_tar

upload_src: $(SRC_TAR)
	$(ECHO) "source upload.tcl; upload_sf `$(NATIVE_PATH) $(SRC_TAR)`" > tmp.tcl
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(TCLSH_PROG) tmp.tcl
	$(RM) tmp.tcl

upload: $(INSTALL_TAR)
	$(ECHO) "source upload.tcl; upload_sf `$(NATIVE_PATH) $(INSTALL_TAR)`" > tmp.tcl
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(TCLSH_PROG) tmp.tcl
	$(RM) tmp.tcl

lib: $(PACKAGE_SHLIB)

shell: $(PACKAGE_SHELL)

#------------------------------------------------------------------------------
# install secondary targets
#------------------------------------------------------------------------------

prefix = /home/dav480/tcl
exec_prefix = /home/dav480/tcl
bindir = ${exec_prefix}/bin
datadir = ${prefix}/share
libdir = ${exec_prefix}/lib
mandir = ${prefix}/man
includedir = ${prefix}/include
PACKAGE_LIBRARY_DIR = $(libdir)/$(PACKAGE)$(VERSION)
SHLIB_DIR = ${libdir}
SHLIB_DIR_BASE = lib

install-binaries: install-lib-binaries install-bin-binaries

install-doc:

# C header files
install-headers: \
	$(includedir)/linsys.h \
	$(includedir)/nap_check.h \
	$(includedir)/nap_hdf.h \
	$(includedir)/nap_netcdf.h \
	$(includedir)/nap.h

$(includedir)/linsys.h: $(GENERIC_DIR)/linsys.h
	if test ! -d $(includedir) ; then mkdir $(includedir); fi
	$(CP) $(GENERIC_DIR)/linsys.h $@

$(includedir)/nap_check.h: $(GENERIC_DIR)/nap_check.h
	if test ! -d $(includedir) ; then mkdir $(includedir); fi
	$(CP) $(GENERIC_DIR)/nap_check.h $@

$(includedir)/nap_hdf.h: $(GENERIC_DIR)/nap_hdf.h
	if test ! -d $(includedir) ; then mkdir $(includedir); fi
	$(CP) $(GENERIC_DIR)/nap_hdf.h $@

$(includedir)/nap_netcdf.h: $(GENERIC_DIR)/nap_netcdf.h
	if test ! -d $(includedir) ; then mkdir $(includedir); fi
	$(CP) $(GENERIC_DIR)/nap_netcdf.h $@

$(includedir)/nap.h: $(GENERIC_DIR)/nap.h
	if test ! -d $(includedir) ; then mkdir $(includedir); fi
	$(CP) $(GENERIC_DIR)/nap.h $@

# tcl scripts
install-libraries: libraries
	if test ! -d $(PACKAGE_LIBRARY_DIR) ; then \
	    mkdir $(PACKAGE_LIBRARY_DIR); fi
	$(CP) $(LIBRARY_DIR)/*.tcl $(PACKAGE_LIBRARY_DIR)
	$(CP) pkgIndex.tcl $(PACKAGE_LIBRARY_DIR)
	$(ECHO) "auto_mkindex `$(NATIVE_PATH) $(PACKAGE_LIBRARY_DIR)` *.tcl" > tmp.tcl
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(TCLSH_PROG) tmp.tcl
	$(RM) tmp.tcl

install-lib-binaries: $(SHLIB_DIR)/$(PACKAGE_SHLIB)

$(SHLIB_DIR)/$(PACKAGE_SHLIB): $(PACKAGE_SHLIB)
	$(CP) $(PACKAGE_SHLIB) $(SHLIB_DIR)
	if test -f $(PACKAGE_IMPORT_LIB) ; then \
	    $(CP) $(PACKAGE_IMPORT_LIB) $(libdir); fi

HDF_DLL_DIR = 
NC_DLL_DIR  = 

install-bin-binaries:
	if test ! -d $(bindir) ; then \
	    mkdir $(bindir); fi
	if test -n "$(HDF_DLL_DIR)" ; then \
	    $(CP) $(HDF_DLL_DIR)/*.dll $(bindir); fi
	if test -n "$(NC_DLL_DIR)" ; then \
	    $(CP) $(NC_DLL_DIR)/*.dll $(bindir); fi

#------------------------------------------------------------------------------
# Rules for Binaries
#------------------------------------------------------------------------------

LIB_PATHS = \
	$(TCL_LIB_PATH) \
	$(TCL_STUB_LIB_PATH) \
	$(TK_LIB_PATH) \
	$(TK_STUB_LIB_PATH) \
	$(BLT_LIB_PATH) \
	$(NC_LIB_PATH) \
	$(HDF_LIB_PATH)

$(PACKAGE_SHLIB): $(OBJS) $(LIB_PATHS)
	$(SHLIB_LD) $(OBJS) $(SHLIB_LD_LIBS)

$(PACKAGE_SHELL): $(OBJS) $(PACKAGE)sh$(OBJEXT) $(LIB_PATHS)
	$(LINK) $(OBJS) $(PACKAGE)sh$(OBJEXT) $(LINK_LIBS)

#------------------------------------------------------------------------------
# Rules for doc files
#------------------------------------------------------------------------------

blt_graph_manual.html: $(mandir)/mann/graph.n
	groff -mandoc -Thtml $(mandir)/mann/graph.n > $@

#------------------------------------------------------------------------------
# Rules for distribution tar files
#------------------------------------------------------------------------------

SRC_MANIFEST = \
generic \
html \
library \
tests \
unix

PLATFORM_MANIFEST = 

INSTALL_MANIFEST = \
$(PLATFORM_MANIFEST) \
include/nap.h \
lib/nap$(VERSION)/tclIndex \
lib/nap$(VERSION)/*.tcl \
$(SHLIB_DIR_BASE)/$(PACKAGE_SHLIB)

$(SRC_TAR): clean
	cd $(TOP_DIR); \
	$(TAR) $(SRC_MANIFEST) | $(COMPRESS) > $@

$(INSTALL_TAR): install
	cd $(ROOT); \
	$(TAR) $(INSTALL_MANIFEST) | $(COMPRESS) > $@

#------------------------------------------------------------------------------
# clean
#------------------------------------------------------------------------------

clean:
	- if test -n "$(OBJEXT)"; then $(RM) *$(OBJEXT); fi
	- if test -n "$(SHLIB_SUFFIX)"; then $(RM) *$(SHLIB_SUFFIX); fi
	- $(RM) \
		test?.tcl \
		$(GENERIC_TMP_C) \
		$(GENERIC_TMP_HDRS) \
		$(PACKAGE_SHELL_PROD) $(PACKAGE_SHELL_DEBUG) \
		*.exe \
		*.exp \
		*.ilk \
		*.lib \
		*.opt \
		*.pdb \
		*.tgz \
		*.Z \
		../*/*core \
		config.cache \
		config.log \
		config.status \
		so_locations \
		vc50.pch

distclean: clean
	$(RM) Makefile

#------------------------------------------------------------------------------
# depend.mk
# 'make depend' makes file 'depend.mk' which is included by this 'Makefile'.
# This method gives user control over making of 'depend.mk'.
# Alternative would be to automate this process by using following:
# depend.mk: $(HDRS) $(SRCS)
# in place of first two lines in following.  Problem with this is that
# 'depend.mk' keeps getting remade after trivial changes (at least with gmake).
#------------------------------------------------------------------------------

depend:
	$(MAKE) $(HDRS) $(SRCS)
	$(CC_MAKEDEPEND) $(SRCS) | sed \
		-e 's!\${OBJEXT}:!$${OBJEXT}:!g' \
		-e 's!${GENERIC_DIR}!$${GENERIC_DIR}!g' \
		-e 's!${HDF_HEADER_DIR}!$${HDF_HEADER_DIR}!g' \
		-e 's!${NC_HEADER_DIR}!$${NC_HEADER_DIR}!g' \
		-e 's!${TCL_HEADER_DIR}!$${TCL_HEADER_DIR}!g' \
		-e 's!${includedir}!$${includedir}!g' \
		-e 's!${ROOT}!$${ROOT}!g' \
		> depend.mk

#------------------------------------------------------------------------------
# bison
#
# BISONFLAGS:
#   -l suppress #line cpp directives
#   -d Generate *.tab.h file
#------------------------------------------------------------------------------

BISON = bison
YY_PREFIX = 'Nap_'
BISONFLAGS = -d -p $(YY_PREFIX)

$(GENERIC_DIR)/napParse.tab.c: $(GENERIC_DIR)/napParse.y
	cd $(GENERIC_DIR); \
	rm -f napParse.tab.c napParse.tab.h; \
	$(BISON) $(BISONFLAGS) napParse.y; \
	chmod -w napParse.tab.c napParse.tab.h

$(GENERIC_DIR)/napParse.tab.h: $(GENERIC_DIR)/napParse.y
	$(MAKE) $(GENERIC_DIR)/napParse.tab.c

#------------------------------------------------------------------------------
# m4
#------------------------------------------------------------------------------

M4INCLUDE_FILES = $(GENERIC_DIR)/include.m4

$(GENERIC_DIR)/linsys.c: $(GENERIC_DIR)/linsys.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/linsys.h: $(GENERIC_DIR)/linsys.h,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/nap.h: $(GENERIC_DIR)/nap.h,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/nap.c: $(GENERIC_DIR)/nap.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napChoice.c: $(GENERIC_DIR)/napChoice.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napDyad.c: $(GENERIC_DIR)/napDyad.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napDyadLib.c: $(GENERIC_DIR)/napDyadLib.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napLib.c: $(GENERIC_DIR)/napLib.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napMonad.c: $(GENERIC_DIR)/napMonad.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napParseLib.c: $(GENERIC_DIR)/napParseLib.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/napSpatial.c: $(GENERIC_DIR)/napSpatial.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/nap_hdf.c: $(GENERIC_DIR)/nap_hdf.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/nap_netcdf.c: $(GENERIC_DIR)/nap_netcdf.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

$(GENERIC_DIR)/nap_ooc.c: $(GENERIC_DIR)/nap_ooc.c,m4 $(M4INCLUDE_FILES)
	rm -f $@; \
	$(M4) $(M4FLAGS) $(M4INCLUDE_FILES) $@,m4 > $@; \
	chmod -w $@

#------------------------------------------------------------------------------
# Compile
#------------------------------------------------------------------------------

$(PACKAGE)sh$(OBJEXT):	$(GENERIC_DIR)/$(PACKAGE)sh.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/$(PACKAGE)sh.c`

linsys$(OBJEXT):		$(GENERIC_DIR)/linsys.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/linsys.c`

napParse.tab$(OBJEXT):	$(GENERIC_DIR)/napParse.tab.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napParse.tab.c`

nap$(OBJEXT):		$(GENERIC_DIR)/nap.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/nap.c`

napChoice$(OBJEXT):	$(GENERIC_DIR)/napChoice.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napChoice.c`

napDyad$(OBJEXT):	$(GENERIC_DIR)/napDyad.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napDyad.c`

napDyadLib$(OBJEXT):	$(GENERIC_DIR)/napDyadLib.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napDyadLib.c`

napImgNAO$(OBJEXT):	$(GENERIC_DIR)/napImgNAO.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napImgNAO.c`

napInit$(OBJEXT):	$(GENERIC_DIR)/napInit.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napInit.c`

napLib$(OBJEXT):	$(GENERIC_DIR)/napLib.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napLib.c`

napMonad$(OBJEXT):	$(GENERIC_DIR)/napMonad.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napMonad.c`

napParseLib$(OBJEXT):	$(GENERIC_DIR)/napParseLib.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napParseLib.c`

napPolygon$(OBJEXT):	$(GENERIC_DIR)/napPolygon.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napPolygon.c`

napSpatial$(OBJEXT):	$(GENERIC_DIR)/napSpatial.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/napSpatial.c`

nap_get$(OBJEXT):	$(GENERIC_DIR)/nap_get.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/nap_get.c`

nap_hdf$(OBJEXT):	$(GENERIC_DIR)/nap_hdf.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/nap_hdf.c`

nap_netcdf$(OBJEXT):	$(GENERIC_DIR)/nap_netcdf.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/nap_netcdf.c`

nap_ooc$(OBJEXT):	$(GENERIC_DIR)/nap_ooc.c
	$(COMPILE) `$(NATIVE_PATH) $(GENERIC_DIR)/nap_ooc.c`

#------------------------------------------------------------------------------
# Tests
#   TEST_COMMAND: Simple command used to check that dynamic loading works
#------------------------------------------------------------------------------

TEST_COMMAND = ::NAP::nap 2+2

TEST_SCRIPT = $(TEST_DIR)/all.tcl

test0.tcl:
	$(ECHO) 'set env(LIBRARY_DIR) {$(LIBRARY_DIR)}' >> $@
	$(ECHO) 'source {$(TEST_SCRIPT)}' >> $@

test1.tcl:
	$(ECHO) "load `$(NATIVE_PATH) $(PWD)/$(PACKAGE_SHLIB)`" >> $@
	$(ECHO) 'puts ""' >> $@
	$(ECHO) 'if [catch {$(TEST_COMMAND)}] {' >> $@
	$(ECHO) '    puts "$(TCLSH_PROG) failed with $(PACKAGE)"' >> $@
	$(ECHO) '    puts ""' >> $@
	$(ECHO) '    exit 1' >> $@
	$(ECHO) '} else {' >> $@
	$(ECHO) '    puts "$(TCLSH_PROG) loaded $(PACKAGE) and"' >> $@
	$(ECHO) '    puts "successfully ran following simple command:"' >> $@
	$(ECHO) '    puts "$(TEST_COMMAND)"' >> $@
	$(ECHO) '    puts ""' >> $@
	$(ECHO) '    exit 0' >> $@
	$(ECHO) '}' >> $@

test2.tcl:
	$(ECHO) 'set env(PACKAGE_SHLIB) {$(PACKAGE_SHLIB)}' >> $@
	$(ECHO) 'source test0.tcl' >> $@

test3.tcl:
	$(ECHO) 'set env(LIBRARY_DIR) {$(LIBRARY_DIR)}' >> $@
	$(ECHO) 'set env(PACKAGE_SHLIB) {$(PACKAGE_SHLIB)}' >> $@
	$(ECHO) 'set env(TMP_STDOUT) {$(TMP_STDOUT)}' >> $@
	$(ECHO) 'source {$(TEST_DIR)/wish_tests.tcl}' >> $@

test: test1 test2 test3

test1: $(PACKAGE_SHLIB) test1.tcl
	$(TCLSH_PROG) test1.tcl

test2: $(PACKAGE_SHLIB) test0.tcl test2.tcl
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(TCLSH_PROG) test2.tcl

test3: $(PACKAGE_SHLIB) test3.tcl
	- $(RM) $(TMP_STDOUT)
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(WISH_PROG) test3.tcl
	- if test -n "$(TMP_STDOUT)"; then cat $(TMP_STDOUT); fi
	- $(RM) $(TMP_STDOUT)

test0: $(PACKAGE_SHELL) test0.tcl
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) $(PACKAGE_SHELL) test0.tcl

#------------------------------------------------------------------------------
# Tag all cvs files
#------------------------------------------------------------------------------

CVS = cvs
CVS_TAG = $(PACKAGE)-$(MAJOR_VERSION)-$(MINOR_VERSION)-$(NODOT_PATCHLEVEL)

tag:
	cd $(TOP_DIR); $(CVS) -Q tag -F $(CVS_TAG)

#------------------------------------------------------------------------------
# Produce profile file 'prof.out' using SGI ssrun & prof
#------------------------------------------------------------------------------

prof.out: $(PACKAGE_SHELL)
	ssrun -usertime $(PACKAGE_SHELL) $(TEST_SCRIPT)
	prof $(PACKAGE_SHELL).usertime.m* > $@
	rm -f *.usertime.*

#------------------------------------------------------------------------------
# depend.mk is made by 'make depend'. See rule above.
#------------------------------------------------------------------------------

include depend.mk
